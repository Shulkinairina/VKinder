import database
from datetime import datetime
from io import BytesIO
import asyncio

from vkbottle import API, Keyboard, Callback, PhotoMessageUploader
from vkbottle.bot import BotLabeler, Message
from vkbottle.http import AiohttpClient

from modules import search, photos
import config

bl = BotLabeler()

api = API(config.VK_TOKEN)
uploader = PhotoMessageUploader(api, generate_attachment_strings=True)

http_client = AiohttpClient()

offset = 0

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã
@bl.message(text="–ø–æ–∏—Å–∫")
async def search_user(message: Message):
    global offset

    token = config.VK_USER_TOKEN

    await message.answer(
        "üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
    api = API(token=token)

    # –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã: age city groups sex
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await api.users.get(fields="sex,city,bdate")

    if user[0].sex.value == 0 or user[0].city is None:
        try:
            sex, city, bdate = database.get_user_data()
        except:
            await message.answer("‚ö†Ô∏è –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '—Ä–µ–≥' –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            return
    else:
        bdate = int(user[0].bdate.split(".")[2])
        sex = 2 if user[0].sex.value == 1 else 1 if user[0].sex.value == 2 else None
        city = user[0].city.id
    age = datetime.now().year - bdate

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    groups = await api.users.get_subscriptions(user_id=message.from_id)
    groups = groups.groups.items

    # –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã
    # –µ—Å–ª–∏ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –±–∞—Ç—á–µ –∏–∑ 50 –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
    # —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset –Ω–∞ 50 –∏ –∏—â–µ–º –¥–∞–ª—å—à–µ.
    # –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞—à–ª–æ—Å—å –≤ 4 –±–∞—Ç—á–∞—Ö, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫.
    i = 0
    while True:
        users = await search.get(api, age, city, groups, sex, offset)
        if len(users) == 0:
            await message.answer("‚ö†Ô∏è –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏.")
            return

        # —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –∏ –ø—Ä–æ—Å–º—Ç—Ä–µ–Ω–Ω—ã—Ö
        blacklist = database.get_blacklist(message.from_id)
        likes = database.get_likes(message.from_id)
        viewed = database.get_viewed_profiles(message.from_id)

        for filter in [blacklist, likes, viewed]:
            if filter is None:
                filter = []
            new_filter = []
            for _id in filter:
                print(_id)
                new_filter.append(int(_id[0]))
            users = [user for user in users if user[0].id not in new_filter]

        if len(users) == 0:
            i+=1
            if i == 4: 
                await message.answer("‚ö†Ô∏è –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏.")
                return
            offset=+50
        else:
            break

    # –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞—à–ª–æ—Å—å
    if len(users) == 0:
        await message.answer("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 10 —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç
    for user in users[:10]:
        keyboard = Keyboard(inline=True)
        keyboard.add(Callback("üíñ", payload={"command": "like", "id": user[0].id}))
        keyboard.add(Callback("üíî", payload={"command": "dislike", "id": user[0].id}))

        # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await asyncio.sleep(1)
        photos_user = await photos.get(api, user[0].id)
        if photos_user is None:
            continue
        attachments = []
        for photo in photos_user:
            photo = await http_client.request_content(photo)
            photo = BytesIO(photo)
            photo.seek(0)
            photo = await uploader.upload(photo.read())
            attachments.append(photo)

        attachments = ",".join(attachments)

        await message.answer(
            f"{user[0].first_name} {user[0].last_name}\n@id{user[0].id}\n\n–û–±—â–∏—Ö –≥—Ä—É–ø–ø: {user[2]}",
            attachment=attachments,
            keyboard=keyboard.get_json(),
        )

        database.add_viewed_profiles(message.from_id, user[0].id)
